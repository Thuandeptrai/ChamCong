import mongoose, { Schema, Document } from 'mongoose';
import { ProductType } from '../interfaces';

export interface ProductModel extends ProductType, Document {}

const ProductSchema: Schema = new Schema(
  {
    object_id: { type: Number, required: true },
    category_id: { type: Number, required: true },
    type: { type: Number, required: false, default: 0 },
    name: { type: String, required: true },
    description: { type: String, required: false, default: '' },
    visible: { type: Number, required: false, default: 0 },
    domain_options: { type: Number, required: false, default: 0 },
    stock: { type: Number, required: false, default: 0 },
    qty: { type: Number, required: false, default: 0 },
    autosetup: { type: Number, required: false, default: 0 },
    subdomain: { type: String, required: false, default: '' },
    owndomain: { type: Number, required: false, default: 0 },
    owndomainwithus: { type: Number, required: false, default: 0 },
    tax: { type: Number, required: false, default: 0 },
    tax_group_id: { type: Number, required: false, default: 0 },
    client_limit: { type: Number, required: false, default: 0 },
    upgrades: { type: String, required: false, default: 0 },
    sort_order: { type: Number, required: false, default: 0 },
    rel: { type: String, required: true },
    welcome_email_id: { type: Number, required: false, default: 0 },
    suspend_email_id: { type: Number, required: false, default: 0 },
    unsuspend_email_id: { type: Number, required: false, default: 0 },
    terminate_email_id: { type: Number, required: false, default: 0 },
    paytype: { type: String, required: true },
    m_setup: { type: Number, required: false, default: 0 },
    q_setup: { type: Number, required: false, default: 0 },
    s_setup: { type: Number, required: false, default: 0 },
    a_setup: { type: Number, required: false, default: 0 },
    b_setup: { type: Number, required: false, default: 0 },
    t_setup: { type: Number, required: false, default: 0 },
    d_setup: { type: Number, required: false, default: 0 },
    w_setup: { type: Number, required: false, default: 0 },
    h_setup: { type: Number, required: false, default: 0 },
    m_upgrade: { type: Number, required: false, default: 0 },
    q_upgrade: { type: Number, required: false, default: 0 },
    s_upgrade: { type: Number, required: false, default: 0 },
    a_upgrade: { type: Number, required: false, default: 0 },
    b_upgrade: { type: Number, required: false, default: 0 },
    t_upgrade: { type: Number, required: false, default: 0 },
    d_upgrade: { type: Number, required: false, default: 0 },
    w_upgrade: { type: Number, required: false, default: 0 },
    h_upgrade: { type: Number, required: false, default: 0 },
    m: { type: Number, required: false, default: 0 },
    q: { type: Number, required: false, default: 0 },
    s: { type: Number, required: false, default: 0 },
    a: { type: Number, required: false, default: 0 },
    b: { type: Number, required: false, default: 0 },
    t: { type: Number, required: false, default: 0 },
    d: { type: Number, required: false, default: 0 },
    w: { type: Number, required: false, default: 0 },
    h: { type: Number, required: false, default: 0 },
    ptype: { type: String, required: true },
    options: { type: Object, required: false, default: {} },
    module: { type: Number, required: false, default: 0 },
    server: { type: Object, required: false, default: {} },
    tlds: { type: Object, required: false },
    periods: { type: Object, required: false },
    free_domain: { type: Number, required: false, default: 0 },
    hostname: { type: Boolean, required: false, default: false },
    ospick: { type: Boolean, required: false, default: false },
    modules: { type: Array, required: false, default: [] },
    block_cancellation_day: { type: Number, required: false, default: 0 },
    main: { type: Number, required: false, default: 0 },
    modname: { type: String, required: false, default: '' },
    filename: { type: String, required: false, default: '' },
    tags: { type: Array, required: false, default: [] },
    metrics: { type: Array, required: false, default: [] },
    service_type: { type: String, required: true },
    product_id: { type: Number, required: true },
    domain_op: { type: Array, required: false, default: [] },
    autohostname: { type: String, required: false, default: '' },
    username_generation: { type: String, required: false, default: '' },
    p_options: { type: Number, required: false, default: 0 },
    code: { type: String, required: false, default: '' },
  },
  {
    timestamps: true,
    collection: 'products',
  }
);

ProductSchema.set('toJSON', {
  virtuals: true,
  versionKey: false,
  transform: function (doc, ret) {
    delete ret._id;
  },
});

export default mongoose.model<ProductModel>('product', ProductSchema);
